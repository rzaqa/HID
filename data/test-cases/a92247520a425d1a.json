{"uid":"a92247520a425d1a","name":"id_006","fullName":"hid_tests.tests.test_hash.TestHashFiles#test_read_log_line","historyId":"6a1a89bd96965d0520731d246bc90d7e","time":{"start":1755853257278,"stop":1755853257529,"duration":251},"status":"skipped","statusMessage":"XFAIL Known bug id_hash_001: HashReadNextLogLine returns code 1 instead of code 4\n\nRuntimeError: HashReadNextLogLine failed, error code 1","statusTrace":"self = <hid_tests.tests.test_hash.TestHashFiles object at 0x7f8cf33b22d0>\n\n    @allure.title(\"id_006\")\n    @pytest.mark.xfail(reason=\"Known bug id_hash_001: HashReadNextLogLine returns code 1 instead of code 4\")\n    def test_read_log_line(self):\n        hash_wrapper.init_library()\n        try:\n            op_id = hash_wrapper.start_hashing(str(self.samples_dir))\n            _wait_done(op_id, timeout_s=10)\n    \n            lines = []\n            while True:\n>               line = hash_wrapper.read_log_line()\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nhid_tests/tests/test_hash.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def read_log_line() -> str | None:\n        \"\"\"Read the next log line, or None if the log is empty.\"\"\"\n        raw_ptr = c_void_p()\n        err = lib.HashReadNextLogLine(byref(raw_ptr))\n        print(f\"[DEBUG] read_log_line: err={err}\")\n        if err == HASH_ERROR_LOG_EMPTY:\n            return None\n        if err != HASH_ERROR_OK:\n>           raise RuntimeError(f\"HashReadNextLogLine failed, error code {err}\")\nE           RuntimeError: HashReadNextLogLine failed, error code 1\n\nhid_tests/src/hash_wrapper.py:92: RuntimeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestHashFiles","time":{"start":1755853257278,"stop":1755853257278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL Known bug id_hash_001: HashReadNextLogLine returns code 1 instead of code 4\n\nRuntimeError: HashReadNextLogLine failed, error code 1","statusTrace":"self = <hid_tests.tests.test_hash.TestHashFiles object at 0x7f8cf33b22d0>\n\n    @allure.title(\"id_006\")\n    @pytest.mark.xfail(reason=\"Known bug id_hash_001: HashReadNextLogLine returns code 1 instead of code 4\")\n    def test_read_log_line(self):\n        hash_wrapper.init_library()\n        try:\n            op_id = hash_wrapper.start_hashing(str(self.samples_dir))\n            _wait_done(op_id, timeout_s=10)\n    \n            lines = []\n            while True:\n>               line = hash_wrapper.read_log_line()\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nhid_tests/tests/test_hash.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def read_log_line() -> str | None:\n        \"\"\"Read the next log line, or None if the log is empty.\"\"\"\n        raw_ptr = c_void_p()\n        err = lib.HashReadNextLogLine(byref(raw_ptr))\n        print(f\"[DEBUG] read_log_line: err={err}\")\n        if err == HASH_ERROR_LOG_EMPTY:\n            return None\n        if err != HASH_ERROR_OK:\n>           raise RuntimeError(f\"HashReadNextLogLine failed, error code {err}\")\nE           RuntimeError: HashReadNextLogLine failed, error code 1\n\nhid_tests/src/hash_wrapper.py:92: RuntimeError","steps":[],"attachments":[{"uid":"a3bfb66199ef255d","name":"stdout","source":"a3bfb66199ef255d.txt","type":"text/plain","size":833}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_xunit_setup_method_fixture_TestHashFiles::0","time":{"start":1755853257545,"stop":1755853257545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"functional"},{"name":"parentSuite","value":"hid_tests.tests"},{"name":"suite","value":"test_hash"},{"name":"subSuite","value":"TestHashFiles"},{"name":"host","value":"pkrvmqc4gcfdwos"},{"name":"thread","value":"2202-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"hid_tests.tests.test_hash"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["functional"]},"source":"a92247520a425d1a.json","parameterValues":[]}