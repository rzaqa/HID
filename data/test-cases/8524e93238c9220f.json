{"uid":"8524e93238c9220f","name":"test_log_line_structure_and_hash_match","fullName":"hid_tests.tests.test_hash.TestHashFiles#test_log_line_structure_and_hash_match","historyId":"5d681480d51a1cb78bc1f901a6de3aa8","time":{"start":1755852688540,"stop":1755852688693,"duration":153},"status":"skipped","statusMessage":"XFAIL Known bug id_hash_006: Incomplete MD5 hash returned from read_log_line()\n\nAssertionError: Invalid MD5 hash format: F36B265220F5E88EDD57963A1109146\nassert None\n +  where None = <function fullmatch at 0x7f191920eca0>('[A-F0-9]{32}', 'F36B265220F5E88EDD57963A1109146')\n +    where <function fullmatch at 0x7f191920eca0> = re.fullmatch","statusTrace":"self = <hid_tests.tests.test_hash.TestHashFiles object at 0x7f1917b67bc0>\n\n    @pytest.mark.xfail(reason=\"Known bug id_hash_006: Incomplete MD5 hash returned from read_log_line()\")\n    @pytest.mark.functional\n    @allure.label(\"test_id\", \"test_hash_013\")\n    def test_log_line_structure_and_hash_match(self):\n        test_file = Path(__file__).parent.parent / \"data\" / \"samples\" / \"positive\" / \"one_file\" / \"a.txt\"\n    \n        with allure.step(\"Calculate expected MD5 hash from file content\"):\n            expected_hash = hashlib.md5(test_file.read_bytes()).hexdigest().upper()\n            print(f\"expected_hash: {expected_hash}\")\n    \n        with allure.step(\"Initialize hashing library\"):\n            hash_wrapper.init_library()\n    \n        try:\n            with allure.step(\"Start hashing operation on the folder containing the file\"):\n                op_id = hash_wrapper.start_hashing(str(test_file.parent))\n    \n            with allure.step(\"Wait until hashing operation completes\"):\n                assert _wait_done(op_id), \"Hashing did not complete\"\n    \n            with allure.step(\"Read one log line from result\"):\n                line = hash_wrapper.read_log_line()\n                assert line is not None, \"No log line returned\"\n    \n            with allure.step(\"Parse and validate log line format\"):\n                parts = line.strip().split()\n                assert len(parts) == 3, f\"Unexpected log line format: {line}\"\n    \n            logged_op_id, file_path, hash_val = parts\n    \n            with allure.step(\"Validate parsed values\"):\n                print(f\"[DEBUG] expected_hash: {expected_hash} (len={len(expected_hash)})\")\n                print(f\"[DEBUG] actual_hash:   {hash_val} (len={len(hash_val)})\")\n    \n                assert logged_op_id.isdigit(), \"Logged op_id must be numeric\"\n                assert Path(file_path).resolve() == test_file.resolve(), \"File path in log does not match expected\"\n>               assert re.fullmatch(r\"[A-F0-9]{32}\", hash_val), f\"Invalid MD5 hash format: {hash_val}\"\nE               AssertionError: Invalid MD5 hash format: F36B265220F5E88EDD57963A1109146\nE               assert None\nE                +  where None = <function fullmatch at 0x7f191920eca0>('[A-F0-9]{32}', 'F36B265220F5E88EDD57963A1109146')\nE                +    where <function fullmatch at 0x7f191920eca0> = re.fullmatch\n\nhid_tests/tests/test_hash.py:263: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestHashFiles","time":{"start":1755852688539,"stop":1755852688540,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL Known bug id_hash_006: Incomplete MD5 hash returned from read_log_line()\n\nAssertionError: Invalid MD5 hash format: F36B265220F5E88EDD57963A1109146\nassert None\n +  where None = <function fullmatch at 0x7f191920eca0>('[A-F0-9]{32}', 'F36B265220F5E88EDD57963A1109146')\n +    where <function fullmatch at 0x7f191920eca0> = re.fullmatch","statusTrace":"self = <hid_tests.tests.test_hash.TestHashFiles object at 0x7f1917b67bc0>\n\n    @pytest.mark.xfail(reason=\"Known bug id_hash_006: Incomplete MD5 hash returned from read_log_line()\")\n    @pytest.mark.functional\n    @allure.label(\"test_id\", \"test_hash_013\")\n    def test_log_line_structure_and_hash_match(self):\n        test_file = Path(__file__).parent.parent / \"data\" / \"samples\" / \"positive\" / \"one_file\" / \"a.txt\"\n    \n        with allure.step(\"Calculate expected MD5 hash from file content\"):\n            expected_hash = hashlib.md5(test_file.read_bytes()).hexdigest().upper()\n            print(f\"expected_hash: {expected_hash}\")\n    \n        with allure.step(\"Initialize hashing library\"):\n            hash_wrapper.init_library()\n    \n        try:\n            with allure.step(\"Start hashing operation on the folder containing the file\"):\n                op_id = hash_wrapper.start_hashing(str(test_file.parent))\n    \n            with allure.step(\"Wait until hashing operation completes\"):\n                assert _wait_done(op_id), \"Hashing did not complete\"\n    \n            with allure.step(\"Read one log line from result\"):\n                line = hash_wrapper.read_log_line()\n                assert line is not None, \"No log line returned\"\n    \n            with allure.step(\"Parse and validate log line format\"):\n                parts = line.strip().split()\n                assert len(parts) == 3, f\"Unexpected log line format: {line}\"\n    \n            logged_op_id, file_path, hash_val = parts\n    \n            with allure.step(\"Validate parsed values\"):\n                print(f\"[DEBUG] expected_hash: {expected_hash} (len={len(expected_hash)})\")\n                print(f\"[DEBUG] actual_hash:   {hash_val} (len={len(hash_val)})\")\n    \n                assert logged_op_id.isdigit(), \"Logged op_id must be numeric\"\n                assert Path(file_path).resolve() == test_file.resolve(), \"File path in log does not match expected\"\n>               assert re.fullmatch(r\"[A-F0-9]{32}\", hash_val), f\"Invalid MD5 hash format: {hash_val}\"\nE               AssertionError: Invalid MD5 hash format: F36B265220F5E88EDD57963A1109146\nE               assert None\nE                +  where None = <function fullmatch at 0x7f191920eca0>('[A-F0-9]{32}', 'F36B265220F5E88EDD57963A1109146')\nE                +    where <function fullmatch at 0x7f191920eca0> = re.fullmatch\n\nhid_tests/tests/test_hash.py:263: AssertionError","steps":[{"name":"Calculate expected MD5 hash from file content","time":{"start":1755852688540,"stop":1755852688540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Initialize hashing library","time":{"start":1755852688540,"stop":1755852688540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Start hashing operation on the folder containing the file","time":{"start":1755852688540,"stop":1755852688541,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Wait until hashing operation completes","time":{"start":1755852688541,"stop":1755852688691,"duration":150},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Read one log line from result","time":{"start":1755852688691,"stop":1755852688691,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Parse and validate log line format","time":{"start":1755852688691,"stop":1755852688691,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Validate parsed values","time":{"start":1755852688692,"stop":1755852688692,"duration":0},"status":"failed","statusMessage":"AssertionError: Invalid MD5 hash format: F36B265220F5E88EDD57963A1109146\nassert None\n +  where None = <function fullmatch at 0x7f191920eca0>('[A-F0-9]{32}', 'F36B265220F5E88EDD57963A1109146')\n +    where <function fullmatch at 0x7f191920eca0> = re.fullmatch\n","statusTrace":"  File \"/home/runner/work/HID/HID/hid_tests/tests/test_hash.py\", line 263, in test_log_line_structure_and_hash_match\n    assert re.fullmatch(r\"[A-F0-9]{32}\", hash_val), f\"Invalid MD5 hash format: {hash_val}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Terminate hashing library","time":{"start":1755852688693,"stop":1755852688693,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"f7183758118db49e","name":"stdout","source":"f7183758118db49e.txt","type":"text/plain","size":446}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_xunit_setup_method_fixture_TestHashFiles::0","time":{"start":1755852688703,"stop":1755852688703,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"test_id","value":"test_hash_013"},{"name":"tag","value":"functional"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"hid_tests.tests"},{"name":"suite","value":"test_hash"},{"name":"subSuite","value":"TestHashFiles"},{"name":"host","value":"pkrvmqc4gcfdwos"},{"name":"thread","value":"2173-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"hid_tests.tests.test_hash"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["functional"]},"source":"8524e93238c9220f.json","parameterValues":[]}